{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Data Request Documentation Page","text":"<p>Documentation in progress</p> <p>The contents of the pages are currently in development. </p>"},{"location":"#airtable-links","title":"AirTable Links","text":""},{"location":"#opportunity","title":"Opportunity","text":""},{"location":"#variables","title":"Variables","text":""},{"location":"#physical-parameters","title":"Physical Parameters","text":""},{"location":"#project-layout-when-editing","title":"Project layout when editing","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Content/","title":"DReq Content: technical details","text":"<p>The information used by the data request is version controlled here. This information is referred to as the data request \"content\". It includes all information linking scientific goals to the output variables requested from particular CMIP experiments, and the CF metadata required to completely characterize the output variables. The content is versioned separately from the data request software, which provides an interface to query and utilize the content.  Users should not interact with the content files directly, as the software is intended for this purpose.</p> <p>Airtable databases (\"bases\") maintained by the CMIP IPO and Data Request Task Team are the primary source of the content. These Airtable bases are used to manage the information gathered by the extensive community consultation undertaken to develop the CMIP7 data request. The content repository stores exports of the information from Airtable in <code>json</code> files. Although <code>json</code> files are easily viewable in any text editor, the format of these exported content files is not designed for readability since users should interact with data request content either by using the software or by navigating the Airtable online interface.</p> <p>While users should not interact directly with the expored content files, for reference we document here some basic aspects of these files. There are two flavours of exported content file:</p> <ul> <li> <p><code>dreq_release_export.json</code> contains the content of an official data request release. New versions of this file correspond to tags in this repository with the names of official releases (e.g. <code>v1.0beta</code> or <code>v1.0</code>).</p> </li> <li> <p><code>dreq_raw_export.json</code> contains the content of the \"working\" bases used by the Data Request Task Team, CMIP IPO, and Thematic Author Teams to develop the data request. It is updated on an ongoing basis (i.e., there can be updates between official releases). Its format differs slightly from that of <code>dreq_release_export.json</code>, but for tagged versions its information content should be consistent with <code>dreq_release_export.json</code>.</p> </li> </ul> <p>The basic structure of an export file is: <pre><code>{\n    'base name 1' : {\n        'table name 1' : {\n            ...\n            'records' : { # dict to contain all records (rows) in the table, indexed by each record's unique id string\n                record id 1 : {record info}\n                record id 2 : {record info}\n                ...\n            },\n            'fields' : { # dict to contain schema info about the fields found in each record\n                field id 1 : {field info}\n                field id 2 : {field info}\n                ...\n            },\n        'table name 2' : {...}\n        ...\n        }\n    }\n    'base name 2' : {...}\n    ...\n}\n</code></pre> For example: <pre><code>{\n  \"Data Request Opportunities (Public)\": {\n    \"Comment\": {\n      \"base_id\": \"appbrFryP1MhstOS3\",\n      \"base_name\": \"Data Request Opportunities (Public)\",\n      \"id\": \"tblQqiAzywOppDNvj\",\n      \"name\": \"Comment\",      \n      \"description\": \"\",\n      \"fields\": {\n        \"fld5PnZpNhaifVJ8z\": {\n          \"description\": \"Comment Title\",\n          \"name\": \"Comment Title\",\n          \"type\": \"singleLineText\"\n        },\n        \"fldKYZsaRAapA58NG\": {\n          \"description\": \"Variable groups relevant to the comment.\",\n          \"linked_table_id\": \"tbl4x1RxPwKRZ0VXY\",\n          \"name\": \"Variable Groups\",\n          \"type\": \"multipleRecordLinks\"\n        }, \n    ... \n      \"records\": {\n        \"rec5E9oBVZsxdxHKN\": {\n          \"Comment\": \"The reference to Omon.sltbasin (Omon.slftbasin) is wrong and must be changed to Omon.sltbasin.\\n\",\n          \"Comment Title\": \"Update description\",\n          \"Opportunities\": [\n            \"reczXng420cBQ08hg\"\n          ],\n          \"Status\": \"Done\",\n          \"Theme\": [\n            \"Ocean &amp; Sea-Ice\"\n          ],\n          \"Variable Groups\": [\n            \"recPohW0nDzLULHye\"\n          ]\n        },\n        ...\n</code></pre></p> <p>Each base is a separate top-level entry (\"base\" is Airtable's term for database). This is necessary to ensure the integrity of links between different tables in each base. They are self-consistent within a base, but not across different bases. Note however that release versions (<code>dreq_release_export.json</code>) contain only one base. To create release versions, tables from public views of the three \"working bases\" (Opportunities, Physical Parameters, and Variables) at the release time are consolidated in Airtable into a single, static self-consistent base.</p> <p>In any export, links from a record to one or more other records in other tables appear as lists of record id strings. In the above example, \"Opportunities\" and \"Variable Groups\" are both links (in this instance the lists have length = 1). The field description indicates which table a link points to, which in the above example for \"Variable Groups\" is the table with the id string given by <code>linked_table_id</code>. (In this instance it's obvious which table is linked to because the field name is the same as the table name, but that's not required and isn't always the case.) Note that the unique ids of records, such as <code>\"recPohW0nDzLULHye\"</code>, or of other entities in the export (tables, fields, and bases), are not equivalent to the persistent unique identifiers (uid) of data request objects.  These ids are internally generated when the information is exported from airtable, and provide self-consistent identifiers within the export file but are not persistent identifiers.</p>"},{"location":"Software/","title":"Data request software","text":"<p>The data request software provides python code allowing users to interact programatically with the CMIP7 data request. It will provide an API and scripts that can produce lists of the variables requested for each CMIP7 experiment, information about the requested variables, and in general support different ways of querying and utilizing the information in the data request.</p>"},{"location":"Software/#overview","title":"Overview","text":"<p>The CMIP7 data request Software and Content are version controlled in separate github repositories. Official releases of the data request correspond to a tag in each of these repositories (e.g., <code>v1.0beta</code>).  However the Software can interact with different versions of the Content - for example, to examine changes that have occurred when a new version of the data request is issued.</p> <p>The data request Content, which is version controlled here, refers to the information comprising the data request.  This includes descriptions of Opportunities and their lists of requested variables, definitions of the variables, etc. The Content is stored as <code>json</code> and read by the data request Software as its input, but users should not interact with this <code>json</code> directly and its structure is not designed for readability. Users do not need to manually download the Content as this is done automatically by the Software (see \"Getting Started\", below, for further details).</p> <p>The data request Content is an automatic export from Airtable, a cloud platform used by the Data Request Task Team to facilitate ongoing community engagement in developing the data request. Airtable provides users with a browseable web interface to explore data request information contained in relational databases that are referred to as \"bases\". These Airtable bases contain interlinked tables that constitute the primary source of data request information.</p> <p>The Content of each official release of the data request can be explored online using the Airtable interface. This provides a browseable web view of the Content, allowing users to follow links between different elements of the data request - for example, to view the variables requested by a given Opportunity, or to view the Opportunities that request a given variable. This view is complementary to the access to the Content that is provided via the Software, and both access methods (Airtable and Software) are based on the same underlying information about the data request.</p> <p>Using the data request Software provides a way to interact programmatically with the data request Content, such as to:</p> <ul> <li>Given a list of supported opportunities and their priorities, produce lists of variables to output for each experiment (see Getting Started section to test this functionality),</li> <li>Output the CF-compliant metadata characterizing each variable (an example file with some of the metadata for each requested variable is available in v1.0beta),</li> <li>Compare the requested output of CMIP7 experiments to a given model's published CMIP6 output (not yet available with v1.0beta, to come in a commit to come soon before v1.0),</li> <li>Estimate output volumes (not yet available with v1.0beta, to come in a commit to come soon before v1.0).</li> </ul> <p>The Software should facilitate integration of the data request into modelling workflows. Suggestions for functionality are welcome in the github discussion forum.</p> <p>During development, the Software and Content repositories reside in the github organisation https://github.com/CMIP-Data-Request. Stable releases will eventually be migrated into the https://github.com/WCRP-CMIP organisation.</p>"},{"location":"Software/#getting-started","title":"Getting started","text":"<p>To begin, clone the Software and navigate to the <code>scripts/</code> directory: <pre><code>git clone git@github.com:CMIP-Data-Request/CMIP7_DReq_Software.git\ncd CMIP7_DReq_Software/scripts\n</code></pre> The <code>env.yml</code> file can be used to create a conda environment in which to run the Software: <pre><code>conda env create -n my_dreq_env --file env.yml\n</code></pre> replacing <code>my_dreq_env</code> with your preferred environment name.  Activate this environment: <pre><code>conda activate my_dreq_env\n</code></pre> and run the the example script: <pre><code>python workflow_example.py\n</code></pre> This script contains a workflow to access the data request Content, specify a list of Opportunities and priority levels of variables, and output the lists of variables requested from each experiment in the specified Opportunities. Each listed variables is currently identified by a unique \"compound name\" using CMIP6-era table names and short variable names (<code>Amon.tas</code>, <code>Omon.tos</code>, etc). Variable names may change in upcoming releases, but in any case a mapping to CMIP6-era variable names will be retained in the data request so as to allow comparison with CMIP6 output (for those variables that were defined in CMIP6).</p> <p>To access the data request Content, the example script first needs to identify the version of the data request Content that is being used.  This is done by specifying a tag in the Content repo and calling the retrieval function. For example: <pre><code>dc.retrieve('v1.0beta')\n</code></pre> downloads <code>v1.0beta</code> of the Content into local cache, if it is not already there. The script can then access it by loading it into a python dict variable: <pre><code>content = dc.load('v1.0beta')\n</code></pre> Currently a single version of the Content <code>json</code> file is roughly 20 MB in size. The size of local cache can be managed by deleting unused versions. For example, to remove a specific version: <pre><code>dc.delete('v1.0beta')\n</code></pre> Or to remove all locally cached versions: <pre><code>dc.delete()\n</code></pre></p>"},{"location":"Software/Airtable_Extraction/","title":"Airtable","text":"<p>The use of airtable is only temporary, and once complete the Data Request will have a permanent versioned location under the WCRP-CMIP github organisation. </p>"},{"location":"Software/Airtable_Extraction/Structure/","title":"Structure Diagram","text":"<p>This needs to be updated to reflect the process.</p> <pre><code>graph TD\n    style A fill:#f9f,stroke:#333,stroke-width:2px;\n    style B fill:#bbf,stroke:#333,stroke-width:2px;\n    style C fill:#ccf,stroke:#333,stroke-width:2px;\n    style D fill:#99f,stroke:#333,stroke-width:2px;\n    style E fill:#ccf,stroke:#333,stroke-width:2px;\n    style F fill:#99f,stroke:#333,stroke-width:2px;\n    style G fill:#f66,stroke:#333,stroke-width:2px;\n    style H fill:#9f9,stroke:#333,stroke-width:2px;\n    style I fill:#9f9,stroke:#333,stroke-width:2px;\n    style J fill:#9f9,stroke:#333,stroke-width:2px;\n    style K fill:#ff9,stroke:#333,stroke-width:2px;\n\n    A[Authors Decide on Variables in Airtable] --&gt; B{Cron Action on GitHub Every 2 Hours}\n    B --&gt; |Repeat Process| C[Extract Data from Airtable using API]\n    C --&gt; D[Python Script Parses Data]\n    D --&gt; E[GitHub Action Processes Data]\n    E --&gt; F[Generate JSON, XML, etc.]\n    F --&gt; G{Are There Updates?}\n    G --&gt; |Yes| H[Push Data to GitHub Repository]\n    G --&gt; |No| B\n\n    subgraph Secondary Process [Secondary Software Process]\n        H --&gt; I[Software Reads from GitHub Repository]\n        I --&gt; J[Software Parses Data]\n        J --&gt; K[Return Processed Format for User]\n    end\n</code></pre>"}]}